import api from './api';
import { authService } from './authService';

export const servicoService = {
  // Criar novo servi√ßo (apenas prestadores)
  async createServico(servicoData) {
    try {
      console.log('üìù Enviando dados do servi√ßo:', servicoData);
      
      const response = await api.post('/servicos', servicoData);
      
      if (response.data.success) {
        console.log('‚úÖ Servi√ßo criado com sucesso:', response.data.servico);
        return response.data;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao criar servi√ßo:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao cadastrar servi√ßo');
    }
  },

  // Buscar servi√ßos do prestador logado
  async getServicosByPrestador() {
    try {
      const response = await api.get('/servicos/prestador');
      
      if (response.data.success) {
        return response.data.servicos;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar servi√ßos do prestador:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao buscar servi√ßos');
    }
  },

  // Buscar todos os servi√ßos (para clientes - acesso p√∫blico)
  async getAllServicos() {
    try {
      const response = await api.get('/servicos');
      
      if (response.data.success) {
        return response.data;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar todos os servi√ßos:', error.message);
      
      // Mensagens de erro mais amig√°veis
      if (error.message.includes('Network Error')) {
        throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente.');
      }
      
      throw new Error(error.response?.data?.error || 'Erro ao carregar servi√ßos dispon√≠veis');
    }
  },

  // Buscar servi√ßos dispon√≠veis (apenas servi√ßos ativos)
  async getServicosDisponiveis() {
    try {
      const response = await api.get('/servicos');
      
      if (response.data.success) {
        // Filtra apenas servi√ßos ativos
        const servicosAtivos = {
          ...response.data,
          servicos: response.data.servicos.filter(servico => servico.ativo !== 0)
        };
        return servicosAtivos;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar servi√ßos dispon√≠veis:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao carregar servi√ßos dispon√≠veis');
    }
  },

  // Buscar servi√ßo por ID
  async getServicoById(id) {
    try {
      // Primeiro busca todos os servi√ßos
      const response = await api.get('/servicos');
      
      if (response.data.success) {
        // Encontra o servi√ßo espec√≠fico
        const servico = response.data.servicos.find(s => s.id === parseInt(id));
        
        if (!servico) {
          throw new Error('Servi√ßo n√£o encontrado');
        }
        
        return servico;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar servi√ßo por ID:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao buscar servi√ßo');
    }
  },

  // Atualizar servi√ßo
  async updateServico(id, servicoData) {
    try {
      // Nota: Esta rota precisa ser implementada no backend
      const response = await api.put(`/servicos/${id}`, servicoData);
      
      if (response.data.success) {
        console.log('‚úÖ Servi√ßo atualizado com sucesso:', response.data.servico);
        return response.data;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao atualizar servi√ßo:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao atualizar servi√ßo');
    }
  },

  // Excluir servi√ßo
  async deleteServico(id) {
    try {
      const response = await api.delete(`/servicos/${id}`);
      
      if (response.data.success) {
        console.log('‚úÖ Servi√ßo exclu√≠do com sucesso');
        return response.data;
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao excluir servi√ßo:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao excluir servi√ßo');
    }
  },

  // Buscar servi√ßos por prestador espec√≠fico
  async getServicosByPrestadorId(prestador_id) {
    try {
      const response = await api.get('/servicos');
      
      if (response.data.success) {
        // Filtra servi√ßos por prestador
        const servicosPrestador = response.data.servicos.filter(
          servico => servico.prestador_id === prestador_id && servico.ativo !== 0
        );
        
        return {
          success: true,
          servicos: servicosPrestador,
          total: servicosPrestador.length
        };
      } else {
        throw new Error(response.data.error);
      }
    } catch (error) {
      console.error('‚ùå Erro ao buscar servi√ßos do prestador:', error.message);
      throw new Error(error.response?.data?.error || 'Erro ao buscar servi√ßos do prestador');
    }
  },

  // Validar dados do servi√ßo antes do envio
  validarDadosServico(servicoData) {
    const errors = [];
    
    if (!servicoData.nome || servicoData.nome.trim() === '') {
      errors.push('Nome do servi√ßo √© obrigat√≥rio');
    }
    
    if (!servicoData.local_atendimento || servicoData.local_atendimento.trim() === '') {
      errors.push('Local de atendimento √© obrigat√≥rio');
    }
    
    if (servicoData.valor && servicoData.valor < 0) {
      errors.push('Valor n√£o pode ser negativo');
    }
    
    if (servicoData.tempo_duracao && servicoData.tempo_duracao < 1) {
      errors.push('Tempo de dura√ß√£o deve ser pelo menos 1 minuto');
    }
    
    if (errors.length > 0) {
      throw new Error(errors.join(', '));
    }
    
    return true;
  },

  // Formatar dados do servi√ßo para exibi√ß√£o
  formatarServicoParaExibicao(servico) {
    return {
      id: servico.id,
      nome: servico.nome || 'Servi√ßo sem nome',
      descricao: servico.descricao || 'Sem descri√ß√£o',
      local_atendimento: servico.local_atendimento || 'Local n√£o informado',
      tecnicas_utilizadas: servico.tecnicas_utilizadas || 'N√£o especificado',
      valor: servico.valor || null,
      tempo_duracao: servico.tempo_duracao || null,
      prestador_id: servico.prestador_id,
      prestador_nome: servico.prestador_nome || 'Prestador n√£o identificado',
      ativo: servico.ativo !== undefined ? servico.ativo : true,
      criado_em: servico.criado_em || new Date().toISOString()
    };
  },

  // Formatar valor para exibi√ß√£o
  formatarValor(valor) {
    if (!valor) return 'A combinar';
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(valor);
  },

  // Formatar dura√ß√£o para exibi√ß√£o
  formatarDuracao(minutos) {
    if (!minutos) return 'A definir';
    if (minutos < 60) return `${minutos} min`;
    const horas = Math.floor(minutos / 60);
    const mins = minutos % 60;
    return mins > 0 ? `${horas}h${mins}min` : `${horas}h`;
  }
};