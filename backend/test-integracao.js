const db = require('./src/config/db');

async function testIntegracaoCompleta() {
  try {
    console.log('üß™ INICIANDO TESTE DE INTEGRA√á√ÉO COMPLETA...\n');

    // 1. Teste conex√£o b√°sica
    console.log('1. üîå Testando conex√£o com PostgreSQL...');
    const conexao = await db.query('SELECT NOW() as tempo, version() as versao');
    console.log('   ‚úÖ Conectado - Hora:', conexao.rows[0].tempo);
    console.log('   ‚úÖ Vers√£o:', conexao.rows[0].versao.split(',')[0]);

    // 2. Teste tabelas
    console.log('\n2. üìä Verificando tabelas...');
    const tabelas = await db.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    const tabelasEsperadas = ['agendamentos', 'clientes', 'prestadores', 'servicos', 'usuarios'];
    const tabelasEncontradas = tabelas.rows.map(t => t.table_name);
    
    console.log('   ‚úÖ Tabelas encontradas:', tabelasEncontradas.join(', '));
    
    // 3. Teste dados iniciais
    console.log('\n3. üì¶ Verificando dados iniciais...');
    const contagens = await db.query(`
      SELECT 
        (SELECT COUNT(*) FROM clientes) as clientes,
        (SELECT COUNT(*) FROM prestadores) as prestadores,
        (SELECT COUNT(*) FROM servicos) as servicos,
        (SELECT COUNT(*) FROM usuarios) as usuarios,
        (SELECT COUNT(*) FROM agendamentos) as agendamentos
    `);
    
    const dados = contagens.rows[0];
    console.log('   üë• Clientes:', dados.clientes);
    console.log('   üíº Prestadores:', dados.prestadores);
    console.log('   ‚úÇÔ∏è Servi√ßos:', dados.servicos);
    console.log('   üë§ Usu√°rios:', dados.usuarios);
    console.log('   üìÖ Agendamentos:', dados.agendamentos);

    // 4. Teste usu√°rio admin
    console.log('\n4. üîê Verificando usu√°rio admin...');
    const admin = await db.query("SELECT * FROM usuarios WHERE tipo = 'admin'");
    if (admin.rows.length > 0) {
      console.log('   ‚úÖ Admin encontrado:', admin.rows[0].email);
    } else {
      console.log('   ‚ö†Ô∏è  Nenhum admin encontrado');
    }

    // 5. Teste servi√ßos ativos
    console.log('\n5. üõ†Ô∏è Verificando servi√ßos ativos...');
    const servicosAtivos = await db.query("SELECT COUNT(*) as count FROM servicos WHERE ativo = true");
    console.log('   ‚úÖ Servi√ßos ativos:', servicosAtivos.rows[0].count);

    console.log('\nüéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO COM SUCESSO!');
    console.log('üöÄ O sistema est√° pronto para uso com PostgreSQL!');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE DE INTEGRA√á√ÉO:', error.message);
    console.log('\nüîß Verifique:');
    console.log('   - Se o PostgreSQL est√° rodando');
    console.log('   - Se o database "figaro_schedule" existe');
    console.log('   - Se as tabelas foram criadas corretamente');
    console.log('   - Se as credenciais no .env est√£o corretas');
  }
}

testIntegracaoCompleta();